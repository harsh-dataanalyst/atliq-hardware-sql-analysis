
This document contains the business questions and their corresponding SQL queries used to analyze the Atliq Hardware dataset.

---

## üìå  1.  Provide the list of markets in which customer  "Atliq  Exclusive"  operates its  business in the  APAC  region.

SELECT DISTINCT
    (market)
FROM
    dim_customer
WHERE
    customer = 'Atliq Exclusive'
        AND region = 'APAC';

---

## üìå 2.  What is the percentage of unique product increase in 2021 vs. 2020? The 
   final output contains these fields;
   unique_products_2020 ,unique_products_2021 ,percentage_chg

          WITH count2020 AS (
    SELECT COUNT(DISTINCT s.product_code) AS unique_product_2020
    FROM fact_sales_monthly s
    WHERE s.fiscal_year = 2020
),
count2021 AS (
    SELECT COUNT(DISTINCT s.product_code) AS unique_product_2021
    FROM fact_sales_monthly s
    WHERE s.fiscal_year = 2021
)
SELECT 
    c1.unique_product_2020,
    c2.unique_product_2021,
    ROUND(
        ((c2.unique_product_2021 - c1.unique_product_2020) * 100.0) / NULLIF(c1.unique_product_2020, 0),
        2
    ) AS percentage_chg
FROM count2020 c1
CROSS JOIN count2021 c2;

---

## üìå 3.  Provide a report with all the unique product counts for each  segment  and 
sort them in descending order of product counts. The final output contains 2 fields; 
segment , product_count   

SELECT 
    p.segment,
    COUNT(DISTINCT p.product_code) AS product_count
FROM dim_product p
GROUP BY p.segment
ORDER BY product_count DESC;

---

## üìå 4.  Follow-up: Which segment had the most increase in unique products in 
2021 vs 2020? The final output contains these fields, 
segment 
product_count_2020 
product_count_2021 
difference 

WITH count2020 AS (
    SELECT 
        p.segment,
        COUNT(DISTINCT s.product_code) AS unique_product_2020
    FROM fact_sales_monthly s
    JOIN dim_product p ON s.product_code = p.product_code
    WHERE s.fiscal_year = 2020
    GROUP BY p.segment
),
count2021 AS (
    SELECT 
        p.segment,
        COUNT(DISTINCT s.product_code) AS unique_product_2021
    FROM fact_sales_monthly s
    JOIN dim_product p ON s.product_code = p.product_code
    WHERE s.fiscal_year = 2021
    GROUP BY p.segment
)
SELECT 
    c1.segment,
    c1.unique_product_2020,
    COALESCE(c2.unique_product_2021, 0) AS unique_product_2021,
    COALESCE(c2.unique_product_2021, 0) - c1.unique_product_2020 AS difference
FROM count2020 c1
LEFT JOIN count2021 c2 ON c1.segment = c2.segment

---

## üìå 5.  Get the products that have the highest and lowest manufacturing costs. 
The final output should contain these fields, 
product_code 
product 
manufacturing_cost 

SELECT 
    p.product_code AS product_code,
    p.product AS product,
    ROUND(SUM(m.manufacturing_cost), 2) AS cost
FROM
    dim_product p
        JOIN
    fact_manufacturing_cost m ON p.product_code = m.product_code
GROUP BY product_code , product;

---

## üìå 6.  Generate a report which contains the top 5 customers who received an 
average high  pre_invoice_discount_pct  for the  fiscal  year 2021  and in the 
Indian  market. The final output contains these fields, 
customer_code 
customer 
average_discount_percentage

SELECT 
    c.customer_code AS customer_code,
    c.customer AS customer,
    AVG(p.pre_invoice_discount_pct) AS average_discount_percentage
FROM
    dim_customer c
        JOIN
    fact_pre_invoice_deductions p ON c.customer_code = p.customer_code
WHERE
    p.fiscal_year = 2021
        AND c.market = 'India'
GROUP BY customer_code , customer
ORDER BY average_discount_percentage DESC
LIMIT 5

---

## üìå 7.  Get the complete report of the Gross sales amount for the customer  ‚ÄúAtliq 
Exclusive‚Äù  for each month  .  This analysis helps to  get an idea of low and 
high-performing months and take strategic decisions. 
The final report contains these columns: 
Month 
Year 
Gross sales Amount

WITH cte1 AS (
    SELECT 
        MONTHNAME(f.date) AS month_name,
        f.fiscal_year,
        round(SUM(g.gross_price * f.sold_quantity),2) AS gross_sales_amount
    FROM fact_sales_monthly f
    JOIN fact_gross_price g ON f.product_code = g.product_code
    JOIN dim_customer c ON c.customer_code = f.customer_code
    WHERE c.customer = 'Atliq exclusive'
    GROUP BY month_name , f.fiscal_year
)
SELECT *
FROM cte1
ORDER BY gross_sales_amount DESC;

---

## üìå 8.  In which quarter of 2020, got the maximum total_sold_quantity? The final 
output contains these fields sorted by the total_sold_quantity, 
Quarter 
total_sold_quantity

SELECT 
    CASE
        WHEN MONTH(date) IN (1 , 2, 3) THEN 'Q1'
        WHEN MONTH(date) IN (4 , 5, 6) THEN 'Q2'
        WHEN MONTH(date) IN (7 , 8, 9) THEN 'Q3'
        WHEN MONTH(date) IN (10 , 11, 12) THEN 'Q4'
    END AS quarter,
    SUM(sold_quantity) AS total_sold_quantity
FROM
    fact_sales_monthly
WHERE
    fiscal_year = 2020
GROUP BY quarter
ORDER BY total_sold_quantity DESC
LIMIT 1;

---

## üìå 9.  Which channel helped to bring more gross sales in the fiscal year 2021 
and the percentage of contribution?  The final output  contains these fields, 
channel 
gross_sales_mln 
percentage

with cte as (select c.channel as channel , 
round(sum(s.sold_quantity*g.gross_price)/1000000,1) as gross_sales_mln 
from 
dim_customer c join fact_sales_monthly s
on c.customer_code = s.customer_code 
join 
fact_gross_price g on g.product_code = s.product_code where s.fiscal_year = 2021 
GROUP BY channel) 
select * , round(gross_sales_mln*100/(select sum(gross_sales_mln) from cte ),2) as percentage 
from 
cte order by percentage desc ;

---

## üìå 10.  Get the Top 3 products in each division that have a high 
total_sold_quantity in the fiscal_year 2021? The final output contains these 
fields;
division 
product_code 
product 
total_sold_quantity 
rank_order

WITH product_sales_2021 AS (
    SELECT 
        p.division,
        s.product_code,
        p.product,
        SUM(s.sold_quantity) AS total_sold_quantity
    FROM fact_sales_monthly s
    JOIN dim_product p ON s.product_code = p.product_code
    WHERE s.fiscal_year = 2021
    GROUP BY p.division, s.product_code, p.product
),
ranked_products AS (
    SELECT 
        division,
        product_code,
        product,
        total_sold_quantity,
        RANK() OVER (PARTITION BY division ORDER BY total_sold_quantity DESC) AS rank_order
    FROM product_sales_2021
)
SELECT 
    division,
    product_code,
    product,
    total_sold_quantity,
    rank_order
FROM ranked_products
WHERE rank_order <= 3
ORDER BY division, rank_order;

 







